---
const description =
  'DOM manipulation library - Combine the declarative React-like syntax with the flexibility of vanilla JS.';
const ogImg =
  process.env.NODE_ENV === 'development'
    ? `${Astro.url.origin}/og-img.png`
    : `${Astro.url.origin}/dom-dom-factory/og-img.png`;

interface Props {
  title?: string;
  className?: string;
}
const { title = 'Dom Dom Factory', className = 'max-w-2xl mx-auto' } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>
    <meta property="og:title" content={title} />
    <meta name="twitter:title" content={title} />

    <meta name="description" content={description} />
    <meta property="og:description" content={description} />
    <meta name="twitter:description" content={description} />

    <meta property="og:image" content={ogImg} />
    <meta name="twitter:image" content={ogImg} />
    <meta name="twitter:card" content="summary_large_image" />
  </head>

  <body class:list={['px-3.5 py-6 md:py-8 transition-[padding]', className]}>
    <slot />
  </body>
</html>

<style is:global>
  body {
    @apply text-sm text-gray-800;
  }

  a {
    @apply text-indigo-600 underline decoration-dashed decoration-indigo-400;
    &:hover {
      @apply decoration-solid decoration-indigo-600;
    }
  }

  code {
    @apply bg-gray-200 px-1 py-px rounded text-xs;
  }
  pre.astro-code {
    font-size: 0.7rem;
    line-height: 1rem;
    @apply rounded p-3.5 sm:text-xs;
    > code {
      all: unset;
    }
  }
</style>
